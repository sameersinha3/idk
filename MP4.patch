diff --git a/arch/x86/net/rex.c b/arch/x86/net/rex.c
index f70a15ac2..bcccafbfe 100644
--- a/arch/x86/net/rex.c
+++ b/arch/x86/net/rex.c
@@ -4,20 +4,30 @@
  */
 #define pr_fmt(fmt) "rex: " fmt
 
+
 #include <linux/bpf.h>
 #include <linux/compiler_types.h>
 #include <linux/module.h>
 #include <linux/percpu.h>
 #include <linux/printk.h>
 #include <linux/vmalloc.h>
+#include <linux/kernel.h>
+#include <linux/percpu.h>
+#include <linux/printk.h>
+#include <asm/processor.h>
+#include <asm/current.h>
 
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/rex.h>
+#include <linux/percpu.h>
+#include "rex.h"
+
+static DEFINE_PER_CPU(struct cpu_state, rex_cpu_state);
 
 /* Align to page size, since the stack trace is broken anyway */
 struct rex_stack {
-	char stack[REX_STACK_SIZE];
+    char stack[REX_STACK_SIZE];
 } __aligned(PAGE_SIZE);
 
 DEFINE_PER_CPU_PAGE_ALIGNED(struct rex_stack, rex_stack_backing_store)
@@ -35,51 +45,65 @@ DECLARE_PER_CPU(const struct bpf_prog *, rex_curr_prog);
  */
 __nocfi noinstr void __noreturn rex_landingpad(char *msg);
 
+struct cpu_state *get_per_cpu_state(void) {
+    return this_cpu_ptr(&rex_cpu_state);
+}
+
 static int map_rex_stack(unsigned int cpu)
 {
-	char *stack = (char *)per_cpu_ptr(&rex_stack_backing_store, cpu);
-	struct page *pages[REX_STACK_SIZE / PAGE_SIZE];
-	void *va;
-	int i;
+    char *stack = (char *)per_cpu_ptr(&rex_stack_backing_store, cpu);
+    struct page *pages[REX_STACK_SIZE / PAGE_SIZE];
+    void *va;
+    int i;
 
-	for (i = 0; i < REX_STACK_SIZE / PAGE_SIZE; i++) {
-		phys_addr_t pa = per_cpu_ptr_to_phys(stack + (i << PAGE_SHIFT));
+    for (i = 0; i < REX_STACK_SIZE / PAGE_SIZE; i++) {
+        phys_addr_t pa = per_cpu_ptr_to_phys(stack + (i << PAGE_SHIFT));
 
-		pages[i] = pfn_to_page(pa >> PAGE_SHIFT);
-	}
+        pages[i] = pfn_to_page(pa >> PAGE_SHIFT);
+    }
 
-	va = vmap(pages, REX_STACK_SIZE / PAGE_SIZE, VM_MAP, PAGE_KERNEL);
-	if (!va)
-		return -ENOMEM;
+    va = vmap(pages, REX_STACK_SIZE / PAGE_SIZE, VM_MAP, PAGE_KERNEL);
+    if (!va)
+        return -ENOMEM;
 
-	/* Store actual TOS to avoid adjustment in the hotpath */
-	per_cpu(rex_stack_ptr, cpu) = va + REX_STACK_SIZE - 8;
+    /* Store actual TOS to avoid adjustment in the hotpath */
+    per_cpu(rex_stack_ptr, cpu) = va + REX_STACK_SIZE - 8;
 
-	pr_info("Initialize rex_stack on CPU %d at 0x%llx\n", cpu,
-		((u64)va) + REX_STACK_SIZE);
+    pr_info("Initialize rex_stack on CPU %d at 0x%llx\n", cpu,
+        ((u64)va) + REX_STACK_SIZE);
 
-	return 0;
+    return 0;
 }
 
 int arch_init_rex_stack(void)
 {
-	int i, ret = 0;
-	for_each_online_cpu(i) {
-		ret = map_rex_stack(i);
-		if (ret < 0) {
-			pr_err("Failed to initialize rex stack on CPU %d\n", i);
-			break;
-		}
-	}
-	return ret;
+    int i, ret = 0;
+    for_each_online_cpu(i) {
+        ret = map_rex_stack(i);
+        if (ret < 0) {
+            pr_err("Failed to initialize rex stack on CPU %d\n", i);
+            break;
+        }
+    }
+    return ret;
 }
 
 __nocfi noinstr void __noreturn rex_landingpad(char *msg)
 {
-	panic("Rex program panic: \"%s\", "
-	      "you need to handle exceptional control flow for extra credit\n",
-	      msg);
-
-	/* Unreachable, noreturn */
-	unreachable();
+    printk(KERN_ERR "Rex panic: %s\n", msg);
+
+    struct cpu_state *state = get_per_cpu_state();
+    if (state && state->saved_rsp) {
+        // Restore stack pointer
+        asm volatile(
+            "movq %0, %%rsp\n\t"
+            "ret\n\t"
+            :
+            : "r"(state->saved_rsp)
+            : "memory"
+        );
+    } else {
+        panic("Failed to restore control flow after Rex panic");
+    }
 }
+
diff --git a/arch/x86/net/rex_64.S b/arch/x86/net/rex_64.S
index 0a88e9c83..6b92271ff 100644
--- a/arch/x86/net/rex_64.S
+++ b/arch/x86/net/rex_64.S
@@ -21,10 +21,17 @@ SYM_FUNC_START(rex_dispatcher_func)
 	pushq %r15
 
 	/* TODO: Handle exceptional control flow for extra credit */
+	movq %rsp, %gs:PER_CPU_SAVED_RSP
+	lea rex_landingpad(%rip), %rax
+	movq %rax, %gs:PER_CPU_LANDINGPAD
 
 	/* invoke bpf func */
 	call *%rdx
 
+	/* Clear saved state in per-CPU storage */
+	movq $0, %gs:PER_CPU_SAVED_RSP
+	movq $0, %gs:PER_CPU_LANDINGPAD
+
 	/* restore the callee-saved registers and the frame pointer */
 	popq %r15
 	popq %r14
